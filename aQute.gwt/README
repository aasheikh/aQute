Acknowledgements
This project demonstrates the use of Karl Pauls PojoSR in a GWT example. You
will need bndtools installed as well as the Google Plugin with GWT SDK 2.3.0. At
the same time, it makes it possible to run GWT in a normal OSGi framework.

Quick Steps

In OSGi mode
	Select bnd.bnd, Debug As .. -> OSGi Run
	Then browse to http://localhost:8080/index.html
	push send ... etc.
	
	In this mode you can make changes to all code and this
	will be immediately loaded in the framework. Just set
	a breakpoint at Greeter.java and modify the text for example.
	push send ... etc.
	
WAR in classic Servlet mode
	Select project, Debug As .. -> Web Application
	Then browse to http://127.0.0.1:8888/index.html?gwt.codesvr=127.0.0.1:9997
	push send ... etc.
	
	In this default WAR mode the GWT servlet is created from the web.xml.
	You have to be careful with changes. Simple changes are made in memory
	but when you restart the code is reset because the bundles used in this
	example must be copied to the war/WEB-INF/lib directory.

	This example let the web.xml directly create the servlet, so no Http
	Service is used. This works because in the WAR there is only one
	
WAR with Http Service
	Modify war/WEB-INF/web.xml, enable the proxy and disable the dispatcher
	Make sure you stop the previous run.
	Select project, Debug As .. -> Web Application
	Then browse to http://127.0.0.1:8888/index.html?gwt.codesvr=127.0.0.1:9997
	Refresh
	push send ... etc.

	Also here, changes must be manually tracked and changed bundles must be
	copied to the war/WEB-INF/lib directory ...

	In my experience the Http Service works better because the module is in full
	control, not external configuration in web.xml.
	
				
Background
GWT has a server and a browser component, both written in Java. The browser
component is, however, compiled from Java to Javascript. This makes it
easy to reuse interfaces and utilities between the client in the browser
and the server code.

Normally, the GWT model has a servlet per callable service on the server. This
model is at odds with OSGi where we'd like to have one reusable servlet that
dispatches to the service registry. In this project you find the GWTDispatchServlet.
This servlet will treat any POST request as a GWT request. GET requests 
are used to look in bundles for static content. Any active bundle will provide
any content in its STATIC directory.

In this model, the server code only has to register a service and
the dispatcher will automatically find it. I.e. the whiteboard model.
The service must be exported a la Distributed OSGi for security reasons.

That is, if you have a service that needs to be called from GWT you
create an interface (and the async interface of course). You call this
from the client and on the server you make a service out of it. You
register this service with service.exported.interfaces=* and that is all.

Application
The application is standard hello world example in GWT. There is a Greeter
client that allows the user to type his name. If the send button is
used the Greeting service is called with that name, the result is
printed on the screen.


Bundles
This example includes the following bundles:

  dispatcher  - A dispatcher for GWT requests
  greeter     - The server code implementing the greeter service
  gwt-servlet - The wrapped runtime code for gwt. It reads the
                gwt-servlet.jar from the war's lib directory. Make
                sure this works. It is only used in the OSGi mode
                as a bundle.
  
Requirements:

- bndtools from the Eclipse market place
- Eclipse GWT Plugin from the Eclipse market place. The war/WEB-INF/lib directory
  contains a copy of the gwt runtime, make sure this is aligned with 


