package aQute.poma.gui;

import java.util.*;

import aQute.poma.domain.*;
import aQute.poma.service.gateway.*;

import com.vaadin.annotations.*;
import com.vaadin.data.*;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.*;
import com.vaadin.ui.*;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;

public class PaymentView extends CustomComponent {
	private static final long	serialVersionUID	= 1L;
	@AutoGenerated
	private AbsoluteLayout		mainLayout;
	@AutoGenerated
	private Panel				paymentGatewayPanel;
	@AutoGenerated
	private AbsoluteLayout		paymentGatewayPanelLayout;
	@AutoGenerated
	private NativeSelect		paymentGatewaySelect;
	@AutoGenerated
	private Table				billTable;
	@AutoGenerated
	private Button				payButton;

	// Is the currently selected payment form and gateway
	private Component			activePaymentForm;
	private PaymentGateway		activePaymentGateway;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	final POMApp				model;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization. The constructor will not be
	 * automatically regenerated by the visual editor.
	 */
	public PaymentView(final POMApp model) {
		this.model = model;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		billTable.setSelectable(true);
		payButton.addListener(new ClickListener() {
			private static final long	serialVersionUID	= 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				model.pay((Bill) billTable.getValue(), activePaymentGateway.getTransfer(activePaymentForm));
			}
		});

		paymentGatewayPanel.setScrollable(false);
		paymentGatewayPanelLayout.setSizeFull();

		billTable.setImmediate(true);
		billTable.setEditable(false);

		payButton.setImmediate(true);

		checkPayEnabled();

		billTable.addListener(new Property.ValueChangeListener() {
			private static final long	serialVersionUID	= 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				checkPayEnabled();
			}

		});

		paymentGatewaySelect.addListener(new ValueChangeListener() {
			private static final long	serialVersionUID	= 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				checkPayEnabled();
				PaymentGateway pf = (PaymentGateway) paymentGatewaySelect.getValue();
				paymentGatewayPanel.removeAllComponents();
				if (pf != null) {
					activePaymentGateway = pf;
					activePaymentForm = pf.getForm();
					paymentGatewayPanel.addComponent(activePaymentForm);
				} else {
					activePaymentGateway = null;
					activePaymentForm = null;
				}
			}
		});
		paymentGatewaySelect.setImmediate(true);
	}

	void checkPayEnabled() {
		String msg = null;
		Bill bill = (Bill) billTable.getValue();
		if (bill == null)
			msg = "No bill selected";
		else if (paymentGatewaySelect.getValue() == null)
			msg = "No payment method set";
		else if (model.paymentManager.get() == null)
			msg = "No Payment Manager found";
		else if (bill.getPaid() != Bill.Payment.UNPAID)
			msg = "Bill already " + bill.getPaid();

		payButton.setEnabled(msg == null);
		payButton.setDescription(msg);
	}

	public void setBills(Collection< ? extends Bill> bills2) {
		BeanItemContainer<Bill> bills = new BeanItemContainer<Bill>(Bill.class);
		bills.addAll(bills2);
		this.billTable.setContainerDataSource(bills);
		billTable.setVisibleColumns(new String[] {
				"id", "amount", "paid"
		});
		billTable.setColumnWidth("id", 50);
	}

	public void addPaymentMethod(PaymentGateway pf) {
		paymentGatewaySelect.addItem(pf);
		paymentGatewaySelect.setItemCaption(pf, pf.getName());
	}

	public void removePaymentMethod(PaymentGateway pf) {
		boolean iscurrent = paymentGatewaySelect.getValue() == pf;
		paymentGatewaySelect.removeItem(pf);
		if (iscurrent)
			paymentGatewaySelect.select(null);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("500px");
		mainLayout.setHeight("500px");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("500px");
		setHeight("500px");

		// pay
		payButton = new Button();
		payButton.setCaption("Pay");
		payButton.setImmediate(true);
		payButton.setWidth("80px");
		payButton.setHeight("30px");
		mainLayout.addComponent(payButton, "top:160.0px;left:400.0px;");

		// bills
		billTable = new Table();
		billTable.setCaption("Bills");
		billTable.setImmediate(false);
		billTable.setWidth("460px");
		billTable.setHeight("120px");
		mainLayout.addComponent(billTable, "top:20.0px;left:20.0px;");

		// paymentOption
		paymentGatewaySelect = new NativeSelect();
		paymentGatewaySelect.setImmediate(false);
		paymentGatewaySelect.setWidth("220px");
		paymentGatewaySelect.setHeight("-1px");
		mainLayout.addComponent(paymentGatewaySelect, "top:160.0px;left:20.0px;");

		// panel_1
		paymentGatewayPanel = buildPanel_1();
		mainLayout.addComponent(paymentGatewayPanel, "top:190.0px;left:20.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		paymentGatewayPanel = new Panel();
		paymentGatewayPanel.setImmediate(false);
		paymentGatewayPanel.setWidth("462px");
		paymentGatewayPanel.setHeight("210px");

		// absoluteLayout_2
		paymentGatewayPanelLayout = new AbsoluteLayout();
		paymentGatewayPanelLayout.setImmediate(false);
		paymentGatewayPanelLayout.setWidth("100.0%");
		paymentGatewayPanelLayout.setHeight("217px");
		paymentGatewayPanelLayout.setMargin(false);
		paymentGatewayPanel.setContent(paymentGatewayPanelLayout);

		return paymentGatewayPanel;
	}

}
